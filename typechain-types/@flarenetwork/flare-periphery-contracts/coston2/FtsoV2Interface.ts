/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace FtsoV2Interface {
  export type FeedIdChangeStruct = {
    oldFeedId: BytesLike;
    newFeedId: BytesLike;
  };

  export type FeedIdChangeStructOutput = [
    oldFeedId: string,
    newFeedId: string
  ] & { oldFeedId: string; newFeedId: string };

  export type FeedDataStruct = {
    votingRoundId: BigNumberish;
    id: BytesLike;
    value: BigNumberish;
    turnoutBIPS: BigNumberish;
    decimals: BigNumberish;
  };

  export type FeedDataStructOutput = [
    votingRoundId: bigint,
    id: string,
    value: bigint,
    turnoutBIPS: bigint,
    decimals: bigint
  ] & {
    votingRoundId: bigint;
    id: string;
    value: bigint;
    turnoutBIPS: bigint;
    decimals: bigint;
  };

  export type FeedDataWithProofStruct = {
    proof: BytesLike[];
    body: FtsoV2Interface.FeedDataStruct;
  };

  export type FeedDataWithProofStructOutput = [
    proof: string[],
    body: FtsoV2Interface.FeedDataStructOutput
  ] & { proof: string[]; body: FtsoV2Interface.FeedDataStructOutput };
}

export interface FtsoV2InterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateFeeById"
      | "calculateFeeByIds"
      | "getFeedById"
      | "getFeedByIdInWei"
      | "getFeedIdChanges"
      | "getFeedsById"
      | "getFeedsByIdInWei"
      | "getFtsoProtocolId"
      | "getSupportedFeedIds"
      | "verifyFeedData"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FeedIdChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateFeeById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFeeByIds",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedByIdInWei",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedIdChanges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedsById",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedsByIdInWei",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoProtocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedFeedIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFeedData",
    values: [FtsoV2Interface.FeedDataWithProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFeeById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFeeByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedByIdInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedIdChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedsByIdInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoProtocolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedFeedIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyFeedData",
    data: BytesLike
  ): Result;
}

export namespace FeedIdChangedEvent {
  export type InputTuple = [oldFeedId: BytesLike, newFeedId: BytesLike];
  export type OutputTuple = [oldFeedId: string, newFeedId: string];
  export interface OutputObject {
    oldFeedId: string;
    newFeedId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FtsoV2Interface extends BaseContract {
  connect(runner?: ContractRunner | null): FtsoV2Interface;
  waitForDeployment(): Promise<this>;

  interface: FtsoV2InterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateFeeById: TypedContractMethod<[_feedId: BytesLike], [bigint], "view">;

  calculateFeeByIds: TypedContractMethod<
    [_feedIds: BytesLike[]],
    [bigint],
    "view"
  >;

  getFeedById: TypedContractMethod<
    [_feedId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        _value: bigint;
        _decimals: bigint;
        _timestamp: bigint;
      }
    ],
    "payable"
  >;

  getFeedByIdInWei: TypedContractMethod<
    [_feedId: BytesLike],
    [[bigint, bigint] & { _value: bigint; _timestamp: bigint }],
    "payable"
  >;

  getFeedIdChanges: TypedContractMethod<
    [],
    [FtsoV2Interface.FeedIdChangeStructOutput[]],
    "view"
  >;

  getFeedsById: TypedContractMethod<
    [_feedIds: BytesLike[]],
    [
      [bigint[], bigint[], bigint] & {
        _values: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "payable"
  >;

  getFeedsByIdInWei: TypedContractMethod<
    [_feedIds: BytesLike[]],
    [[bigint[], bigint] & { _values: bigint[]; _timestamp: bigint }],
    "payable"
  >;

  getFtsoProtocolId: TypedContractMethod<[], [bigint], "view">;

  getSupportedFeedIds: TypedContractMethod<[], [string[]], "view">;

  verifyFeedData: TypedContractMethod<
    [_feedData: FtsoV2Interface.FeedDataWithProofStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateFeeById"
  ): TypedContractMethod<[_feedId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateFeeByIds"
  ): TypedContractMethod<[_feedIds: BytesLike[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeedById"
  ): TypedContractMethod<
    [_feedId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        _value: bigint;
        _decimals: bigint;
        _timestamp: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getFeedByIdInWei"
  ): TypedContractMethod<
    [_feedId: BytesLike],
    [[bigint, bigint] & { _value: bigint; _timestamp: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getFeedIdChanges"
  ): TypedContractMethod<
    [],
    [FtsoV2Interface.FeedIdChangeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedsById"
  ): TypedContractMethod<
    [_feedIds: BytesLike[]],
    [
      [bigint[], bigint[], bigint] & {
        _values: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getFeedsByIdInWei"
  ): TypedContractMethod<
    [_feedIds: BytesLike[]],
    [[bigint[], bigint] & { _values: bigint[]; _timestamp: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getFtsoProtocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSupportedFeedIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "verifyFeedData"
  ): TypedContractMethod<
    [_feedData: FtsoV2Interface.FeedDataWithProofStruct],
    [boolean],
    "view"
  >;

  getEvent(
    key: "FeedIdChanged"
  ): TypedContractEvent<
    FeedIdChangedEvent.InputTuple,
    FeedIdChangedEvent.OutputTuple,
    FeedIdChangedEvent.OutputObject
  >;

  filters: {
    "FeedIdChanged(bytes21,bytes21)": TypedContractEvent<
      FeedIdChangedEvent.InputTuple,
      FeedIdChangedEvent.OutputTuple,
      FeedIdChangedEvent.OutputObject
    >;
    FeedIdChanged: TypedContractEvent<
      FeedIdChangedEvent.InputTuple,
      FeedIdChangedEvent.OutputTuple,
      FeedIdChangedEvent.OutputObject
    >;
  };
}
