/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ICoreVaultClientSettingsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCoreVaultManager"
      | "getCoreVaultMinimumAmountLeftBIPS"
      | "getCoreVaultMinimumRedeemLots"
      | "getCoreVaultNativeAddress"
      | "getCoreVaultRedemptionFeeBIPS"
      | "getCoreVaultTransferTimeExtensionSeconds"
      | "setCoreVaultManager"
      | "setCoreVaultMinimumAmountLeftBIPS"
      | "setCoreVaultMinimumRedeemLots"
      | "setCoreVaultNativeAddress"
      | "setCoreVaultRedemptionFeeBIPS"
      | "setCoreVaultTransferTimeExtensionSeconds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCoreVaultManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultMinimumAmountLeftBIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultMinimumRedeemLots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultNativeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultRedemptionFeeBIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVaultTransferTimeExtensionSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultMinimumAmountLeftBIPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultMinimumRedeemLots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultNativeAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultRedemptionFeeBIPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVaultTransferTimeExtensionSeconds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCoreVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultMinimumAmountLeftBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultMinimumRedeemLots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultNativeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultRedemptionFeeBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVaultTransferTimeExtensionSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultMinimumAmountLeftBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultMinimumRedeemLots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultNativeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultRedemptionFeeBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVaultTransferTimeExtensionSeconds",
    data: BytesLike
  ): Result;
}

export interface ICoreVaultClientSettings extends BaseContract {
  connect(runner?: ContractRunner | null): ICoreVaultClientSettings;
  waitForDeployment(): Promise<this>;

  interface: ICoreVaultClientSettingsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCoreVaultManager: TypedContractMethod<[], [string], "view">;

  getCoreVaultMinimumAmountLeftBIPS: TypedContractMethod<[], [bigint], "view">;

  getCoreVaultMinimumRedeemLots: TypedContractMethod<[], [bigint], "view">;

  getCoreVaultNativeAddress: TypedContractMethod<[], [string], "view">;

  getCoreVaultRedemptionFeeBIPS: TypedContractMethod<[], [bigint], "view">;

  getCoreVaultTransferTimeExtensionSeconds: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  setCoreVaultManager: TypedContractMethod<
    [_coreVaultManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setCoreVaultMinimumAmountLeftBIPS: TypedContractMethod<
    [_minimumAmountLeftBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCoreVaultMinimumRedeemLots: TypedContractMethod<
    [_minimumRedeemLots: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCoreVaultNativeAddress: TypedContractMethod<
    [_nativeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setCoreVaultRedemptionFeeBIPS: TypedContractMethod<
    [_redemptionFeeBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCoreVaultTransferTimeExtensionSeconds: TypedContractMethod<
    [_transferTimeExtensionSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCoreVaultManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultMinimumAmountLeftBIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultMinimumRedeemLots"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultNativeAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultRedemptionFeeBIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCoreVaultTransferTimeExtensionSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setCoreVaultManager"
  ): TypedContractMethod<
    [_coreVaultManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCoreVaultMinimumAmountLeftBIPS"
  ): TypedContractMethod<
    [_minimumAmountLeftBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCoreVaultMinimumRedeemLots"
  ): TypedContractMethod<
    [_minimumRedeemLots: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCoreVaultNativeAddress"
  ): TypedContractMethod<[_nativeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCoreVaultRedemptionFeeBIPS"
  ): TypedContractMethod<
    [_redemptionFeeBIPS: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCoreVaultTransferTimeExtensionSeconds"
  ): TypedContractMethod<
    [_transferTimeExtensionSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
