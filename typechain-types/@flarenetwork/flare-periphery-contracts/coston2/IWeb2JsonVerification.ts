/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IWeb2Json {
  export type RequestBodyStruct = {
    url: string;
    httpMethod: string;
    headers: string;
    queryParams: string;
    body: string;
    postProcessJq: string;
    abiSignature: string;
  };

  export type RequestBodyStructOutput = [
    url: string,
    httpMethod: string,
    headers: string,
    queryParams: string,
    body: string,
    postProcessJq: string,
    abiSignature: string
  ] & {
    url: string;
    httpMethod: string;
    headers: string;
    queryParams: string;
    body: string;
    postProcessJq: string;
    abiSignature: string;
  };

  export type ResponseBodyStruct = { abiEncodedData: BytesLike };

  export type ResponseBodyStructOutput = [abiEncodedData: string] & {
    abiEncodedData: string;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IWeb2Json.RequestBodyStruct;
    responseBody: IWeb2Json.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IWeb2Json.RequestBodyStructOutput,
    responseBody: IWeb2Json.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IWeb2Json.RequestBodyStructOutput;
    responseBody: IWeb2Json.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IWeb2Json.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IWeb2Json.ResponseStructOutput
  ] & { merkleProof: string[]; data: IWeb2Json.ResponseStructOutput };
}

export interface IWeb2JsonVerificationInterface extends Interface {
  getFunction(nameOrSignature: "verifyWeb2Json"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyWeb2Json",
    values: [IWeb2Json.ProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyWeb2Json",
    data: BytesLike
  ): Result;
}

export interface IWeb2JsonVerification extends BaseContract {
  connect(runner?: ContractRunner | null): IWeb2JsonVerification;
  waitForDeployment(): Promise<this>;

  interface: IWeb2JsonVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyWeb2Json: TypedContractMethod<
    [_proof: IWeb2Json.ProofStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyWeb2Json"
  ): TypedContractMethod<[_proof: IWeb2Json.ProofStruct], [boolean], "view">;

  filters: {};
}
