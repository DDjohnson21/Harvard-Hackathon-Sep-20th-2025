/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FTG_CrossChainTravelVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ETH_USD_FEED"
      | "FLR_USD_FEED"
      | "XRP_USD_FEED"
      | "batchConvertXRPToFlare"
      | "checkCrossChainPriceTrigger"
      | "contributeFlare"
      | "convertXRPToFlare"
      | "createCrossChainVault"
      | "executeSmartAccountAction"
      | "fdcVerification"
      | "ftsoConsumer"
      | "fxrpAssetManager"
      | "fxrpToken"
      | "getCrossChainVaultInfo"
      | "getFAssetsBalance"
      | "getMemberXRPLAddress"
      | "getXRPLTransactions"
      | "getXRPToFlareRate"
      | "joinCrossChainVault"
      | "mintFAssets"
      | "nextVaultId"
      | "redeemFAssets"
      | "releaseCrossChainFunds"
      | "setupSmartAccount"
      | "vaults"
      | "verifyXRPLContribution"
      | "xrplVerification"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CrossChainTransfer"
      | "FAssetsMinted"
      | "FAssetsRedeemed"
      | "FlareContribution"
      | "FundsReleased"
      | "MemberJoined"
      | "PriceTriggerSet"
      | "SmartAccountAction"
      | "VaultCreated"
      | "XRPLContribution"
      | "XRPReceived"
      | "XRPToFlareConversion"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ETH_USD_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FLR_USD_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "XRP_USD_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchConvertXRPToFlare",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCrossChainPriceTrigger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeFlare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertXRPToFlare",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCrossChainVault",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      boolean,
      BytesLike,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSmartAccountAction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fdcVerification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoConsumer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fxrpAssetManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fxrpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCrossChainVaultInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFAssetsBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberXRPLAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getXRPLTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getXRPToFlareRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinCrossChainVault",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFAssets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextVaultId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFAssets",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseCrossChainFunds",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupSmartAccount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyXRPLContribution",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xrplVerification",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_USD_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FLR_USD_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "XRP_USD_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchConvertXRPToFlare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCrossChainPriceTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeFlare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertXRPToFlare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCrossChainVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSmartAccountAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fdcVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fxrpAssetManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fxrpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCrossChainVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFAssetsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberXRPLAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXRPLTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXRPToFlareRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinCrossChainVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseCrossChainFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupSmartAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyXRPLContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xrplVerification",
    data: BytesLike
  ): Result;
}

export namespace CrossChainTransferEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish,
    xrplAddress: string
  ];
  export type OutputTuple = [
    vaultId: bigint,
    recipient: string,
    amount: bigint,
    xrplAddress: string
  ];
  export interface OutputObject {
    vaultId: bigint;
    recipient: string;
    amount: bigint;
    xrplAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FAssetsMintedEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    fxrpAmount: BigNumberish,
    lots: BigNumberish
  ];
  export type OutputTuple = [vaultId: bigint, fxrpAmount: bigint, lots: bigint];
  export interface OutputObject {
    vaultId: bigint;
    fxrpAmount: bigint;
    lots: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FAssetsRedeemedEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    fxrpAmount: BigNumberish,
    xrplDestination: string
  ];
  export type OutputTuple = [
    vaultId: bigint,
    fxrpAmount: bigint,
    xrplDestination: string
  ];
  export interface OutputObject {
    vaultId: bigint;
    fxrpAmount: bigint;
    xrplDestination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlareContributionEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    contributor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    vaultId: bigint,
    contributor: string,
    amount: bigint
  ];
  export interface OutputObject {
    vaultId: bigint;
    contributor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    flareAmount: BigNumberish,
    fxrpAmount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    vaultId: bigint,
    flareAmount: bigint,
    fxrpAmount: bigint,
    reason: string
  ];
  export interface OutputObject {
    vaultId: bigint;
    flareAmount: bigint;
    fxrpAmount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberJoinedEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    member: AddressLike,
    xrplAddress: AddressLike
  ];
  export type OutputTuple = [
    vaultId: bigint,
    member: string,
    xrplAddress: string
  ];
  export interface OutputObject {
    vaultId: bigint;
    member: string;
    xrplAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceTriggerSetEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    feedId: BytesLike,
    triggerPrice: BigNumberish,
    isLowerBound: boolean
  ];
  export type OutputTuple = [
    vaultId: bigint,
    feedId: string,
    triggerPrice: bigint,
    isLowerBound: boolean
  ];
  export interface OutputObject {
    vaultId: bigint;
    feedId: string;
    triggerPrice: bigint;
    isLowerBound: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SmartAccountActionEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    smartAccount: AddressLike,
    action: string
  ];
  export type OutputTuple = [
    vaultId: bigint,
    smartAccount: string,
    action: string
  ];
  export interface OutputObject {
    vaultId: bigint;
    smartAccount: string;
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCreatedEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    creator: AddressLike,
    destination: string,
    targetAmount: BigNumberish
  ];
  export type OutputTuple = [
    vaultId: bigint,
    creator: string,
    destination: string,
    targetAmount: bigint
  ];
  export interface OutputObject {
    vaultId: bigint;
    creator: string;
    destination: string;
    targetAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XRPLContributionEvent {
  export type InputTuple = [
    vaultId: BigNumberish,
    contributor: AddressLike,
    xrpAmount: BigNumberish,
    txHash: BytesLike
  ];
  export type OutputTuple = [
    vaultId: bigint,
    contributor: string,
    xrpAmount: bigint,
    txHash: string
  ];
  export interface OutputObject {
    vaultId: bigint;
    contributor: string;
    xrpAmount: bigint;
    txHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XRPReceivedEvent {
  export type InputTuple = [
    from: AddressLike,
    xrpAmount: BigNumberish,
    xrpTxHash: string,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    xrpAmount: bigint,
    xrpTxHash: string,
    blockNumber: bigint
  ];
  export interface OutputObject {
    from: string;
    xrpAmount: bigint;
    xrpTxHash: string;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XRPToFlareConversionEvent {
  export type InputTuple = [
    sender: AddressLike,
    xrpAmount: BigNumberish,
    usdValue: BigNumberish,
    flareEquivalent: BigNumberish,
    xrpPriceUSD: BigNumberish,
    flarePriceUSD: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    xrpAmount: bigint,
    usdValue: bigint,
    flareEquivalent: bigint,
    xrpPriceUSD: bigint,
    flarePriceUSD: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    sender: string;
    xrpAmount: bigint;
    usdValue: bigint;
    flareEquivalent: bigint;
    xrpPriceUSD: bigint;
    flarePriceUSD: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FTG_CrossChainTravelVault extends BaseContract {
  connect(runner?: ContractRunner | null): FTG_CrossChainTravelVault;
  waitForDeployment(): Promise<this>;

  interface: FTG_CrossChainTravelVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ETH_USD_FEED: TypedContractMethod<[], [string], "view">;

  FLR_USD_FEED: TypedContractMethod<[], [string], "view">;

  XRP_USD_FEED: TypedContractMethod<[], [string], "view">;

  batchConvertXRPToFlare: TypedContractMethod<
    [xrpAmounts: BigNumberish[], xrpTxHashes: string[]],
    [
      [bigint, bigint] & { totalUsdValue: bigint; totalFlareEquivalent: bigint }
    ],
    "nonpayable"
  >;

  checkCrossChainPriceTrigger: TypedContractMethod<
    [vaultId: BigNumberish],
    [[boolean, bigint] & { shouldRelease: boolean; currentPrice: bigint }],
    "view"
  >;

  contributeFlare: TypedContractMethod<
    [vaultId: BigNumberish],
    [void],
    "payable"
  >;

  convertXRPToFlare: TypedContractMethod<
    [xrpAmount: BigNumberish, xrpTxHash: string],
    [[bigint, bigint] & { usdValue: bigint; flareEquivalent: bigint }],
    "payable"
  >;

  createCrossChainVault: TypedContractMethod<
    [
      destination: string,
      targetAmountFlare: BigNumberish,
      targetAmountXRP: BigNumberish,
      deadline: BigNumberish,
      xrplAddress: AddressLike,
      enableFAssets: boolean,
      priceFeedId: BytesLike,
      triggerPrice: BigNumberish,
      isLowerBound: boolean
    ],
    [bigint],
    "payable"
  >;

  executeSmartAccountAction: TypedContractMethod<
    [vaultId: BigNumberish, action: string],
    [void],
    "nonpayable"
  >;

  fdcVerification: TypedContractMethod<[], [string], "view">;

  ftsoConsumer: TypedContractMethod<[], [string], "view">;

  fxrpAssetManager: TypedContractMethod<[], [string], "view">;

  fxrpToken: TypedContractMethod<[], [string], "view">;

  getCrossChainVaultInfo: TypedContractMethod<
    [vaultId: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        bigint,
        boolean,
        boolean
      ] & {
        destination: string;
        targetAmountFlare: bigint;
        targetAmountXRP: bigint;
        currentAmountFlare: bigint;
        currentAmountFXRP: bigint;
        deadline: bigint;
        creator: string;
        isActive: boolean;
        fundsReleased: boolean;
        memberCount: bigint;
        fAssetsEnabled: boolean;
        smartAccountEnabled: boolean;
      }
    ],
    "view"
  >;

  getFAssetsBalance: TypedContractMethod<
    [vaultId: BigNumberish],
    [[bigint, bigint] & { fxrpAmount: bigint; lots: bigint }],
    "view"
  >;

  getMemberXRPLAddress: TypedContractMethod<
    [vaultId: BigNumberish, member: AddressLike],
    [string],
    "view"
  >;

  getXRPLTransactions: TypedContractMethod<
    [vaultId: BigNumberish],
    [string[]],
    "view"
  >;

  getXRPToFlareRate: TypedContractMethod<[], [bigint], "view">;

  joinCrossChainVault: TypedContractMethod<
    [vaultId: BigNumberish, xrplAddress: AddressLike],
    [void],
    "payable"
  >;

  mintFAssets: TypedContractMethod<
    [vaultId: BigNumberish, lots: BigNumberish],
    [void],
    "nonpayable"
  >;

  nextVaultId: TypedContractMethod<[], [bigint], "view">;

  redeemFAssets: TypedContractMethod<
    [vaultId: BigNumberish, lots: BigNumberish, xrplDestination: string],
    [void],
    "nonpayable"
  >;

  releaseCrossChainFunds: TypedContractMethod<
    [vaultId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  setupSmartAccount: TypedContractMethod<
    [vaultId: BigNumberish, smartAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  vaults: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        boolean,
        bigint,
        string,
        boolean,
        string,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        destination: string;
        targetAmountFlare: bigint;
        targetAmountXRP: bigint;
        currentAmountFlare: bigint;
        currentAmountFXRP: bigint;
        deadline: bigint;
        creator: string;
        isActive: boolean;
        fundsReleased: boolean;
        fAssetsEnabled: boolean;
        fxrpLots: bigint;
        smartAccount: string;
        smartAccountEnabled: boolean;
        priceFeedId: string;
        triggerPrice: bigint;
        isLowerBound: boolean;
        priceTriggersEnabled: boolean;
        requiredApprovals: bigint;
        currentApprovals: bigint;
      }
    ],
    "view"
  >;

  verifyXRPLContribution: TypedContractMethod<
    [
      vaultId: BigNumberish,
      xrplTxHash: BytesLike,
      amount: BigNumberish,
      paymentReference: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  xrplVerification: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ETH_USD_FEED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FLR_USD_FEED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "XRP_USD_FEED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchConvertXRPToFlare"
  ): TypedContractMethod<
    [xrpAmounts: BigNumberish[], xrpTxHashes: string[]],
    [
      [bigint, bigint] & { totalUsdValue: bigint; totalFlareEquivalent: bigint }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkCrossChainPriceTrigger"
  ): TypedContractMethod<
    [vaultId: BigNumberish],
    [[boolean, bigint] & { shouldRelease: boolean; currentPrice: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributeFlare"
  ): TypedContractMethod<[vaultId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "convertXRPToFlare"
  ): TypedContractMethod<
    [xrpAmount: BigNumberish, xrpTxHash: string],
    [[bigint, bigint] & { usdValue: bigint; flareEquivalent: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createCrossChainVault"
  ): TypedContractMethod<
    [
      destination: string,
      targetAmountFlare: BigNumberish,
      targetAmountXRP: BigNumberish,
      deadline: BigNumberish,
      xrplAddress: AddressLike,
      enableFAssets: boolean,
      priceFeedId: BytesLike,
      triggerPrice: BigNumberish,
      isLowerBound: boolean
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeSmartAccountAction"
  ): TypedContractMethod<
    [vaultId: BigNumberish, action: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fdcVerification"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ftsoConsumer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fxrpAssetManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fxrpToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCrossChainVaultInfo"
  ): TypedContractMethod<
    [vaultId: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        bigint,
        boolean,
        boolean
      ] & {
        destination: string;
        targetAmountFlare: bigint;
        targetAmountXRP: bigint;
        currentAmountFlare: bigint;
        currentAmountFXRP: bigint;
        deadline: bigint;
        creator: string;
        isActive: boolean;
        fundsReleased: boolean;
        memberCount: bigint;
        fAssetsEnabled: boolean;
        smartAccountEnabled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFAssetsBalance"
  ): TypedContractMethod<
    [vaultId: BigNumberish],
    [[bigint, bigint] & { fxrpAmount: bigint; lots: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMemberXRPLAddress"
  ): TypedContractMethod<
    [vaultId: BigNumberish, member: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getXRPLTransactions"
  ): TypedContractMethod<[vaultId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getXRPToFlareRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "joinCrossChainVault"
  ): TypedContractMethod<
    [vaultId: BigNumberish, xrplAddress: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintFAssets"
  ): TypedContractMethod<
    [vaultId: BigNumberish, lots: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextVaultId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeemFAssets"
  ): TypedContractMethod<
    [vaultId: BigNumberish, lots: BigNumberish, xrplDestination: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releaseCrossChainFunds"
  ): TypedContractMethod<
    [vaultId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setupSmartAccount"
  ): TypedContractMethod<
    [vaultId: BigNumberish, smartAccount: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vaults"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        boolean,
        bigint,
        string,
        boolean,
        string,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        destination: string;
        targetAmountFlare: bigint;
        targetAmountXRP: bigint;
        currentAmountFlare: bigint;
        currentAmountFXRP: bigint;
        deadline: bigint;
        creator: string;
        isActive: boolean;
        fundsReleased: boolean;
        fAssetsEnabled: boolean;
        fxrpLots: bigint;
        smartAccount: string;
        smartAccountEnabled: boolean;
        priceFeedId: string;
        triggerPrice: bigint;
        isLowerBound: boolean;
        priceTriggersEnabled: boolean;
        requiredApprovals: bigint;
        currentApprovals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyXRPLContribution"
  ): TypedContractMethod<
    [
      vaultId: BigNumberish,
      xrplTxHash: BytesLike,
      amount: BigNumberish,
      paymentReference: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xrplVerification"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CrossChainTransfer"
  ): TypedContractEvent<
    CrossChainTransferEvent.InputTuple,
    CrossChainTransferEvent.OutputTuple,
    CrossChainTransferEvent.OutputObject
  >;
  getEvent(
    key: "FAssetsMinted"
  ): TypedContractEvent<
    FAssetsMintedEvent.InputTuple,
    FAssetsMintedEvent.OutputTuple,
    FAssetsMintedEvent.OutputObject
  >;
  getEvent(
    key: "FAssetsRedeemed"
  ): TypedContractEvent<
    FAssetsRedeemedEvent.InputTuple,
    FAssetsRedeemedEvent.OutputTuple,
    FAssetsRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "FlareContribution"
  ): TypedContractEvent<
    FlareContributionEvent.InputTuple,
    FlareContributionEvent.OutputTuple,
    FlareContributionEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "MemberJoined"
  ): TypedContractEvent<
    MemberJoinedEvent.InputTuple,
    MemberJoinedEvent.OutputTuple,
    MemberJoinedEvent.OutputObject
  >;
  getEvent(
    key: "PriceTriggerSet"
  ): TypedContractEvent<
    PriceTriggerSetEvent.InputTuple,
    PriceTriggerSetEvent.OutputTuple,
    PriceTriggerSetEvent.OutputObject
  >;
  getEvent(
    key: "SmartAccountAction"
  ): TypedContractEvent<
    SmartAccountActionEvent.InputTuple,
    SmartAccountActionEvent.OutputTuple,
    SmartAccountActionEvent.OutputObject
  >;
  getEvent(
    key: "VaultCreated"
  ): TypedContractEvent<
    VaultCreatedEvent.InputTuple,
    VaultCreatedEvent.OutputTuple,
    VaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "XRPLContribution"
  ): TypedContractEvent<
    XRPLContributionEvent.InputTuple,
    XRPLContributionEvent.OutputTuple,
    XRPLContributionEvent.OutputObject
  >;
  getEvent(
    key: "XRPReceived"
  ): TypedContractEvent<
    XRPReceivedEvent.InputTuple,
    XRPReceivedEvent.OutputTuple,
    XRPReceivedEvent.OutputObject
  >;
  getEvent(
    key: "XRPToFlareConversion"
  ): TypedContractEvent<
    XRPToFlareConversionEvent.InputTuple,
    XRPToFlareConversionEvent.OutputTuple,
    XRPToFlareConversionEvent.OutputObject
  >;

  filters: {
    "CrossChainTransfer(uint256,address,uint256,string)": TypedContractEvent<
      CrossChainTransferEvent.InputTuple,
      CrossChainTransferEvent.OutputTuple,
      CrossChainTransferEvent.OutputObject
    >;
    CrossChainTransfer: TypedContractEvent<
      CrossChainTransferEvent.InputTuple,
      CrossChainTransferEvent.OutputTuple,
      CrossChainTransferEvent.OutputObject
    >;

    "FAssetsMinted(uint256,uint256,uint256)": TypedContractEvent<
      FAssetsMintedEvent.InputTuple,
      FAssetsMintedEvent.OutputTuple,
      FAssetsMintedEvent.OutputObject
    >;
    FAssetsMinted: TypedContractEvent<
      FAssetsMintedEvent.InputTuple,
      FAssetsMintedEvent.OutputTuple,
      FAssetsMintedEvent.OutputObject
    >;

    "FAssetsRedeemed(uint256,uint256,string)": TypedContractEvent<
      FAssetsRedeemedEvent.InputTuple,
      FAssetsRedeemedEvent.OutputTuple,
      FAssetsRedeemedEvent.OutputObject
    >;
    FAssetsRedeemed: TypedContractEvent<
      FAssetsRedeemedEvent.InputTuple,
      FAssetsRedeemedEvent.OutputTuple,
      FAssetsRedeemedEvent.OutputObject
    >;

    "FlareContribution(uint256,address,uint256)": TypedContractEvent<
      FlareContributionEvent.InputTuple,
      FlareContributionEvent.OutputTuple,
      FlareContributionEvent.OutputObject
    >;
    FlareContribution: TypedContractEvent<
      FlareContributionEvent.InputTuple,
      FlareContributionEvent.OutputTuple,
      FlareContributionEvent.OutputObject
    >;

    "FundsReleased(uint256,uint256,uint256,string)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "MemberJoined(uint256,address,address)": TypedContractEvent<
      MemberJoinedEvent.InputTuple,
      MemberJoinedEvent.OutputTuple,
      MemberJoinedEvent.OutputObject
    >;
    MemberJoined: TypedContractEvent<
      MemberJoinedEvent.InputTuple,
      MemberJoinedEvent.OutputTuple,
      MemberJoinedEvent.OutputObject
    >;

    "PriceTriggerSet(uint256,bytes21,uint256,bool)": TypedContractEvent<
      PriceTriggerSetEvent.InputTuple,
      PriceTriggerSetEvent.OutputTuple,
      PriceTriggerSetEvent.OutputObject
    >;
    PriceTriggerSet: TypedContractEvent<
      PriceTriggerSetEvent.InputTuple,
      PriceTriggerSetEvent.OutputTuple,
      PriceTriggerSetEvent.OutputObject
    >;

    "SmartAccountAction(uint256,address,string)": TypedContractEvent<
      SmartAccountActionEvent.InputTuple,
      SmartAccountActionEvent.OutputTuple,
      SmartAccountActionEvent.OutputObject
    >;
    SmartAccountAction: TypedContractEvent<
      SmartAccountActionEvent.InputTuple,
      SmartAccountActionEvent.OutputTuple,
      SmartAccountActionEvent.OutputObject
    >;

    "VaultCreated(uint256,address,string,uint256)": TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
    VaultCreated: TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;

    "XRPLContribution(uint256,address,uint256,bytes32)": TypedContractEvent<
      XRPLContributionEvent.InputTuple,
      XRPLContributionEvent.OutputTuple,
      XRPLContributionEvent.OutputObject
    >;
    XRPLContribution: TypedContractEvent<
      XRPLContributionEvent.InputTuple,
      XRPLContributionEvent.OutputTuple,
      XRPLContributionEvent.OutputObject
    >;

    "XRPReceived(address,uint256,string,uint256)": TypedContractEvent<
      XRPReceivedEvent.InputTuple,
      XRPReceivedEvent.OutputTuple,
      XRPReceivedEvent.OutputObject
    >;
    XRPReceived: TypedContractEvent<
      XRPReceivedEvent.InputTuple,
      XRPReceivedEvent.OutputTuple,
      XRPReceivedEvent.OutputObject
    >;

    "XRPToFlareConversion(address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      XRPToFlareConversionEvent.InputTuple,
      XRPToFlareConversionEvent.OutputTuple,
      XRPToFlareConversionEvent.OutputObject
    >;
    XRPToFlareConversion: TypedContractEvent<
      XRPToFlareConversionEvent.InputTuple,
      XRPToFlareConversionEvent.OutputTuple,
      XRPToFlareConversionEvent.OutputObject
    >;
  };
}
