/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface XRPToFlareConverterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchConvertXRPToFlare"
      | "conversionCount"
      | "convertXRPToFlare"
      | "dropsToXRP"
      | "getConversionStats"
      | "getFlarePriceUSD"
      | "getUserConversions"
      | "getXRPPriceUSD"
      | "getXRPToFlareRate"
      | "isXRPLTransactionProcessed"
      | "previewConversion"
      | "processedXRPLTxHashes"
      | "totalFlareGenerated"
      | "totalUSDConverted"
      | "totalXRPProcessed"
      | "userFlareEquivalent"
      | "userUSDValue"
      | "userXRPContributions"
      | "xrpToDrops"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchConversion"
      | "XRPReceived"
      | "XRPToFlareConversion"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchConvertXRPToFlare",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "conversionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertXRPToFlare",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dropsToXRP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConversionStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFlarePriceUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserConversions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getXRPPriceUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getXRPToFlareRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isXRPLTransactionProcessed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "previewConversion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processedXRPLTxHashes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFlareGenerated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUSDConverted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalXRPProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userFlareEquivalent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userUSDValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userXRPContributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xrpToDrops",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchConvertXRPToFlare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertXRPToFlare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dropsToXRP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConversionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlarePriceUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserConversions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXRPPriceUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXRPToFlareRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isXRPLTransactionProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedXRPLTxHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFlareGenerated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUSDConverted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalXRPProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userFlareEquivalent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUSDValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userXRPContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xrpToDrops", data: BytesLike): Result;
}

export namespace BatchConversionEvent {
  export type InputTuple = [
    sender: AddressLike,
    totalXRP: BigNumberish,
    totalUSD: BigNumberish,
    totalFlare: BigNumberish,
    transactionCount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    totalXRP: bigint,
    totalUSD: bigint,
    totalFlare: bigint,
    transactionCount: bigint
  ];
  export interface OutputObject {
    sender: string;
    totalXRP: bigint;
    totalUSD: bigint;
    totalFlare: bigint;
    transactionCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XRPReceivedEvent {
  export type InputTuple = [
    from: AddressLike,
    xrpAmount: BigNumberish,
    xrpTxHash: string,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    xrpAmount: bigint,
    xrpTxHash: string,
    blockNumber: bigint
  ];
  export interface OutputObject {
    from: string;
    xrpAmount: bigint;
    xrpTxHash: string;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XRPToFlareConversionEvent {
  export type InputTuple = [
    sender: AddressLike,
    xrpAmount: BigNumberish,
    usdValue: BigNumberish,
    flareEquivalent: BigNumberish,
    xrpPriceUSD: BigNumberish,
    flarePriceUSD: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    xrpAmount: bigint,
    usdValue: bigint,
    flareEquivalent: bigint,
    xrpPriceUSD: bigint,
    flarePriceUSD: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    sender: string;
    xrpAmount: bigint;
    usdValue: bigint;
    flareEquivalent: bigint;
    xrpPriceUSD: bigint;
    flarePriceUSD: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface XRPToFlareConverter extends BaseContract {
  connect(runner?: ContractRunner | null): XRPToFlareConverter;
  waitForDeployment(): Promise<this>;

  interface: XRPToFlareConverterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchConvertXRPToFlare: TypedContractMethod<
    [xrpAmounts: BigNumberish[], xrpTxHashes: string[]],
    [
      [bigint, bigint] & { totalUsdValue: bigint; totalFlareEquivalent: bigint }
    ],
    "nonpayable"
  >;

  conversionCount: TypedContractMethod<[], [bigint], "view">;

  convertXRPToFlare: TypedContractMethod<
    [xrpAmount: BigNumberish, xrpTxHash: string],
    [[bigint, bigint] & { usdValue: bigint; flareEquivalent: bigint }],
    "nonpayable"
  >;

  dropsToXRP: TypedContractMethod<[drops: BigNumberish], [bigint], "view">;

  getConversionStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalXRP: bigint;
        _totalUSD: bigint;
        _totalFlare: bigint;
        _conversionCount: bigint;
      }
    ],
    "view"
  >;

  getFlarePriceUSD: TypedContractMethod<[], [bigint], "view">;

  getUserConversions: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        xrpContributed: bigint;
        usdValue: bigint;
        flareEquivalent: bigint;
      }
    ],
    "view"
  >;

  getXRPPriceUSD: TypedContractMethod<[], [bigint], "view">;

  getXRPToFlareRate: TypedContractMethod<[], [bigint], "view">;

  isXRPLTransactionProcessed: TypedContractMethod<
    [xrpTxHash: string],
    [boolean],
    "view"
  >;

  previewConversion: TypedContractMethod<
    [xrpAmount: BigNumberish],
    [[bigint, bigint] & { usdValue: bigint; flareEquivalent: bigint }],
    "view"
  >;

  processedXRPLTxHashes: TypedContractMethod<[arg0: string], [boolean], "view">;

  totalFlareGenerated: TypedContractMethod<[], [bigint], "view">;

  totalUSDConverted: TypedContractMethod<[], [bigint], "view">;

  totalXRPProcessed: TypedContractMethod<[], [bigint], "view">;

  userFlareEquivalent: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  userUSDValue: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userXRPContributions: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  xrpToDrops: TypedContractMethod<[tokens: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchConvertXRPToFlare"
  ): TypedContractMethod<
    [xrpAmounts: BigNumberish[], xrpTxHashes: string[]],
    [
      [bigint, bigint] & { totalUsdValue: bigint; totalFlareEquivalent: bigint }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "conversionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertXRPToFlare"
  ): TypedContractMethod<
    [xrpAmount: BigNumberish, xrpTxHash: string],
    [[bigint, bigint] & { usdValue: bigint; flareEquivalent: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dropsToXRP"
  ): TypedContractMethod<[drops: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getConversionStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalXRP: bigint;
        _totalUSD: bigint;
        _totalFlare: bigint;
        _conversionCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlarePriceUSD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserConversions"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        xrpContributed: bigint;
        usdValue: bigint;
        flareEquivalent: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getXRPPriceUSD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getXRPToFlareRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isXRPLTransactionProcessed"
  ): TypedContractMethod<[xrpTxHash: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "previewConversion"
  ): TypedContractMethod<
    [xrpAmount: BigNumberish],
    [[bigint, bigint] & { usdValue: bigint; flareEquivalent: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "processedXRPLTxHashes"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalFlareGenerated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUSDConverted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalXRPProcessed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userFlareEquivalent"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userUSDValue"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userXRPContributions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "xrpToDrops"
  ): TypedContractMethod<[tokens: BigNumberish], [bigint], "view">;

  getEvent(
    key: "BatchConversion"
  ): TypedContractEvent<
    BatchConversionEvent.InputTuple,
    BatchConversionEvent.OutputTuple,
    BatchConversionEvent.OutputObject
  >;
  getEvent(
    key: "XRPReceived"
  ): TypedContractEvent<
    XRPReceivedEvent.InputTuple,
    XRPReceivedEvent.OutputTuple,
    XRPReceivedEvent.OutputObject
  >;
  getEvent(
    key: "XRPToFlareConversion"
  ): TypedContractEvent<
    XRPToFlareConversionEvent.InputTuple,
    XRPToFlareConversionEvent.OutputTuple,
    XRPToFlareConversionEvent.OutputObject
  >;

  filters: {
    "BatchConversion(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BatchConversionEvent.InputTuple,
      BatchConversionEvent.OutputTuple,
      BatchConversionEvent.OutputObject
    >;
    BatchConversion: TypedContractEvent<
      BatchConversionEvent.InputTuple,
      BatchConversionEvent.OutputTuple,
      BatchConversionEvent.OutputObject
    >;

    "XRPReceived(address,uint256,string,uint256)": TypedContractEvent<
      XRPReceivedEvent.InputTuple,
      XRPReceivedEvent.OutputTuple,
      XRPReceivedEvent.OutputObject
    >;
    XRPReceived: TypedContractEvent<
      XRPReceivedEvent.InputTuple,
      XRPReceivedEvent.OutputTuple,
      XRPReceivedEvent.OutputObject
    >;

    "XRPToFlareConversion(address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      XRPToFlareConversionEvent.InputTuple,
      XRPToFlareConversionEvent.OutputTuple,
      XRPToFlareConversionEvent.OutputObject
    >;
    XRPToFlareConversion: TypedContractEvent<
      XRPToFlareConversionEvent.InputTuple,
      XRPToFlareConversionEvent.OutputTuple,
      XRPToFlareConversionEvent.OutputObject
    >;
  };
}
