/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IAgentAlwaysAllowedMinters,
  IAgentAlwaysAllowedMintersInterface,
} from "../../../../@flarenetwork/flare-periphery-contracts/coston2/IAgentAlwaysAllowedMinters";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_agentVault",
        type: "address",
      },
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
    ],
    name: "addAlwaysAllowedMinterForAgent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_agentVault",
        type: "address",
      },
    ],
    name: "alwaysAllowedMintersForAgent",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_agentVault",
        type: "address",
      },
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
    ],
    name: "removeAlwaysAllowedMinterForAgent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IAgentAlwaysAllowedMinters__factory {
  static readonly abi = _abi;
  static createInterface(): IAgentAlwaysAllowedMintersInterface {
    return new Interface(_abi) as IAgentAlwaysAllowedMintersInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IAgentAlwaysAllowedMinters {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IAgentAlwaysAllowedMinters;
  }
}
