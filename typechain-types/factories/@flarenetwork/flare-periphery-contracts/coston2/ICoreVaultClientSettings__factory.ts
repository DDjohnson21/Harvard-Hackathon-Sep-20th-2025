/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICoreVaultClientSettings,
  ICoreVaultClientSettingsInterface,
} from "../../../../@flarenetwork/flare-periphery-contracts/coston2/ICoreVaultClientSettings";

const _abi = [
  {
    inputs: [],
    name: "getCoreVaultManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoreVaultMinimumAmountLeftBIPS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoreVaultMinimumRedeemLots",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoreVaultNativeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoreVaultRedemptionFeeBIPS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoreVaultTransferTimeExtensionSeconds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_coreVaultManager",
        type: "address",
      },
    ],
    name: "setCoreVaultManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minimumAmountLeftBIPS",
        type: "uint256",
      },
    ],
    name: "setCoreVaultMinimumAmountLeftBIPS",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minimumRedeemLots",
        type: "uint256",
      },
    ],
    name: "setCoreVaultMinimumRedeemLots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_nativeAddress",
        type: "address",
      },
    ],
    name: "setCoreVaultNativeAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_redemptionFeeBIPS",
        type: "uint256",
      },
    ],
    name: "setCoreVaultRedemptionFeeBIPS",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_transferTimeExtensionSeconds",
        type: "uint256",
      },
    ],
    name: "setCoreVaultTransferTimeExtensionSeconds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ICoreVaultClientSettings__factory {
  static readonly abi = _abi;
  static createInterface(): ICoreVaultClientSettingsInterface {
    return new Interface(_abi) as ICoreVaultClientSettingsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICoreVaultClientSettings {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ICoreVaultClientSettings;
  }
}
